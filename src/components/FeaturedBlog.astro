---
import { getCollection } from 'astro:content';

const blogPosts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .slice(0, 3);

function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<section id="blog" class="relative py-20 bg-white dark:bg-gray-800 overflow-hidden transition-colors duration-300">
  <!-- Animated background -->
  <div class="absolute inset-0 opacity-30 dark:opacity-20">
    <div class="absolute top-0 left-0 w-full h-full bg-gradient-to-br from-cyan-50 via-blue-50 to-purple-50 dark:from-cyan-900/20 dark:via-blue-900/20 dark:to-purple-900/20"></div>
    <div class="absolute top-20 -left-20 w-96 h-96 bg-cyan-300/20 dark:bg-cyan-500/10 rounded-full blur-3xl animate-pulse"></div>
    <div class="absolute bottom-20 -right-20 w-96 h-96 bg-purple-300/20 dark:bg-purple-500/10 rounded-full blur-3xl animate-pulse" style="animation-delay: 1.5s;"></div>
  </div>
  
  <div class="relative max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center mb-16">
      <h2 class="font-heading font-bold text-5xl md:text-6xl bg-gradient-to-r from-cyan-600 via-blue-600 to-purple-600 bg-clip-text text-transparent mb-4 animate-fade-in-up">
        Latest from the Blog
      </h2>
      <div class="w-24 h-2 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 mx-auto rounded-full shadow-lg"></div>
      <p class="mt-6 text-xl text-gray-600 dark:text-gray-300 max-w-2xl mx-auto">
        Thoughts on software engineering, cloud computing, and tech career insights
      </p>
    </div>
    
    <!-- Blog Carousel Container -->
    <div class="relative max-w-7xl mx-auto">
      <!-- Navigation Arrows -->
      <button 
        id="prevBlog" 
        class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-4 md:-translate-x-12 z-20 bg-gradient-to-r from-cyan-500 to-blue-500 hover:from-cyan-600 hover:to-blue-600 text-white p-4 rounded-full shadow-2xl hover:shadow-blue-500/50 transition-all transform hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Previous blog post"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"/>
        </svg>
      </button>
      
      <button 
        id="nextBlog" 
        class="absolute right-0 top-1/2 -translate-y-1/2 translate-x-4 md:translate-x-12 z-20 bg-gradient-to-r from-blue-500 to-purple-500 hover:from-blue-600 hover:to-purple-600 text-white p-4 rounded-full shadow-2xl hover:shadow-purple-500/50 transition-all transform hover:scale-110 disabled:opacity-50 disabled:cursor-not-allowed"
        aria-label="Next blog post"
      >
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
        </svg>
      </button>

      <!-- Blog Posts Grid with Carousel -->
      <div id="blogCarousel" class="overflow-hidden">
        <div id="blogTrack" class="flex transition-transform duration-500 ease-in-out gap-8">
          {blogPosts.map((post, index) => (
            <article 
              class="blog-card group relative flex-shrink-0 w-full md:w-1/2 lg:w-1/3"
              style={`animation-delay: ${(index + 1) * 200}ms`}
            >
          <!-- Gradient glow on hover -->
          <div class="absolute -inset-0.5 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-2xl opacity-0 group-hover:opacity-100 blur transition-all duration-500"></div>
          
          <!-- Card -->
          <div class="relative bg-white/90 dark:bg-gray-900/90 backdrop-blur-sm rounded-2xl p-8 shadow-xl hover:shadow-2xl transition-all duration-500 border border-gray-100/50 dark:border-gray-700/50 group-hover:border-transparent h-full flex flex-col">
            <!-- Date Badge -->
            <div class="flex items-center gap-2 mb-4">
              <div class="bg-gradient-to-r from-cyan-500 to-blue-500 text-white px-4 py-1 rounded-full text-sm font-semibold">
                {formatDate(post.data.pubDate)}
              </div>
            </div>
            
            <!-- Title -->
            <h3 class="font-heading text-2xl font-bold bg-gradient-to-r from-cyan-600 via-blue-600 to-purple-600 bg-clip-text text-transparent mb-3 group-hover:from-cyan-700 group-hover:via-blue-700 group-hover:to-purple-700 transition-all">
              {post.data.title}
            </h3>
            
            <!-- Description -->
            <p class="text-gray-600 dark:text-gray-300 mb-6 line-clamp-3 flex-grow">
              {post.data.description}
            </p>
            
            <!-- Tags -->
            {post.data.tags && post.data.tags.length > 0 && (
              <div class="flex flex-wrap gap-2 mb-6">
                {post.data.tags.slice(0, 3).map(tag => (
                  <span class="px-3 py-1 bg-gradient-to-r from-cyan-100 to-blue-100 dark:from-cyan-900/30 dark:to-blue-900/30 text-cyan-700 dark:text-cyan-300 rounded-full text-xs font-medium">
                    #{tag}
                  </span>
                ))}
              </div>
            )}
            
            <!-- Read More Link -->
            <a 
              href={`/blog/${post.id}`}
              class="inline-flex items-center gap-2 text-blue-600 dark:text-blue-400 font-semibold hover:text-purple-600 dark:hover:text-purple-400 transition-colors group/link mt-auto"
            >
              Read More
              <svg class="w-5 h-5 group-hover/link:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
              </svg>
            </a>
          </div>
        </article>
      ))}
        </div>
      </div>

      <!-- Dot Indicators -->
      <div id="blogDots" class="flex justify-center gap-3 mt-8">
        {blogPosts.map((_, index) => (
          <button
            class="blog-dot w-3 h-3 rounded-full transition-all duration-300"
            data-index={index}
            aria-label={`Go to blog post ${index + 1}`}
          ></button>
        ))}
      </div>
    </div>
    
    <!-- View All Button -->
    {blogPosts.length > 0 && (
      <div class="text-center mt-12">
        <a 
          href="/blog" 
          class="group relative inline-flex items-center gap-2 px-10 py-5"
        >
          <!-- Animated gradient background -->
          <div class="absolute inset-0 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-full shadow-2xl group-hover:shadow-blue-500/50 transition-all"></div>
          <div class="absolute inset-0 bg-gradient-to-r from-cyan-500 via-blue-500 to-purple-500 rounded-full blur opacity-50 group-hover:opacity-75 transition-opacity"></div>
          
          <!-- Content -->
          <span class="relative text-white font-bold text-lg">View All Posts</span>
          <svg class="relative w-5 h-5 text-white group-hover:translate-x-1 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"/>
          </svg>
        </a>
      </div>
    )}
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', function() {
    const carousel = document.getElementById('blogCarousel');
    const track = document.getElementById('blogTrack');
    const prevBtn = document.getElementById('prevBlog');
    const nextBtn = document.getElementById('nextBlog');
    const dots = document.querySelectorAll('.blog-dot');
    
    if (!carousel || !track || !prevBtn || !nextBtn) return;
    
    let currentIndex = 0;
    const cards = track.querySelectorAll('.blog-card');
    const totalCards = cards.length;
    
    function getItemsPerView() {
      if (window.innerWidth >= 1024) return 3;
      else if (window.innerWidth >= 768) return 2;
      else return 1;
    }
    
    function updateCarousel() {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, totalCards - itemsPerView);
      
      currentIndex = Math.min(currentIndex, maxIndex);
      
      const cardWidth = cards[0].offsetWidth;
      const gap = 32; // 8 * 4px (gap-8 in Tailwind)
      const offset = currentIndex * (cardWidth + gap);
      
      track.style.transform = `translateX(-${offset}px)`;
      
      prevBtn.disabled = currentIndex === 0;
      nextBtn.disabled = currentIndex >= maxIndex;
      
      // Update dots
      dots.forEach((dot, index) => {
        if (index === currentIndex) {
          dot.classList.add('bg-blue-600', 'w-8');
          dot.classList.remove('bg-gray-300', 'dark:bg-gray-600');
        } else {
          dot.classList.add('bg-gray-300', 'dark:bg-gray-600');
          dot.classList.remove('bg-blue-600', 'w-8');
        }
      });
    }
    
    prevBtn.addEventListener('click', () => {
      if (currentIndex > 0) {
        currentIndex--;
        updateCarousel();
      }
    });
    
    nextBtn.addEventListener('click', () => {
      const itemsPerView = getItemsPerView();
      const maxIndex = Math.max(0, totalCards - itemsPerView);
      if (currentIndex < maxIndex) {
        currentIndex++;
        updateCarousel();
      }
    });
    
    // Dot navigation
    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        currentIndex = index;
        updateCarousel();
      });
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (e.key === 'ArrowLeft') {
        prevBtn.click();
      } else if (e.key === 'ArrowRight') {
        nextBtn.click();
      }
    });
    
    // Touch swipe support
    let touchStartX = 0;
    let touchEndX = 0;
    
    carousel.addEventListener('touchstart', (e) => {
      touchStartX = e.changedTouches[0].screenX;
    });
    
    carousel.addEventListener('touchend', (e) => {
      touchEndX = e.changedTouches[0].screenX;
      handleSwipe();
    });
    
    function handleSwipe() {
      const swipeThreshold = 50;
      if (touchEndX < touchStartX - swipeThreshold) {
        nextBtn.click();
      }
      if (touchEndX > touchStartX + swipeThreshold) {
        prevBtn.click();
      }
    }
    
    // Handle window resize
    let resizeTimeout;
    window.addEventListener('resize', () => {
      clearTimeout(resizeTimeout);
      resizeTimeout = setTimeout(updateCarousel, 100);
    });
    
    // Initial update
    updateCarousel();
  });
</script>
